
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CINT CLASS COLON COMMA CSTRING DEF DIGIT DIVIDE ELIF ELSE EQ EQUALS FALSE FLOAT GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS MODULO NE NUMBER OR PERIOD PLUS PRINT PRIVATE PROGRAM PROTECTED PUBLIC RBRACE RBRACKET READ RETURN RPAREN TIMES TRUE VAR VOID WHILEvars : vars vars\n            | VAR auxaux : aux aux\n            | ID COLON tipo_simple\n            | ID COLON tipo_compuesto\n            | ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET COLON tipo_simple\n            | ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET COLON tipo_compuesto\n            | ID LBRACKET cint RBRACKET COLON tipo_simple\n            | ID LBRACKET cint RBRACKET COLON tipo_compuesto\n            | ID aux2 COLON tipo_simple\n            | ID aux2 COLON tipo_compuestoaux2 :  aux2 aux2\n            | COMMA IDtipo_simple : INT\n                    | FLOATtipo_compuesto : IDasignacion : ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET EQUALS expresion\n                    | ID LBRACKET cint RBRACKET EQUALS expresion\n                    | ID EQUALS expresion expresion : exp_bool\n                    | exp_bool rel_op exp_bool\n                    | expresion AND exp_bool\n                    | expresion OR exp_bool\n                    | expresion AND exp_bool rel_op exp_bool\n                    | expresion OR exp_bool rel_op exp_boolexp_bool : TRUE\n                | FALSE\n                | expexp : termino\n            | exp PLUS termino\n            | exp MINUS terminotermino : factor\n                | termino TIMES factor\n                | termino DIVIDE factor\n                | termino MODULO factorfactor : LPAREN expresion RPAREN\n                | var\n                | PLUS var\n                | MINUS varvar : ID\n            | cint\n            | cfloatcint : CINTcfloat : NUMBERrel_op : LT\n                | LE\n                | GT\n                | GE\n                | EQ\n                | NE'
    
_lr_action_items = {'VAR':([0,1,3,4,6,11,12,13,14,15,22,23,27,28,31,32,],[2,2,2,-2,-3,-16,-4,-5,-14,-15,-10,-11,-8,-9,-6,-7,]),'$end':([1,3,4,6,11,12,13,14,15,22,23,27,28,31,32,],[0,-1,-2,-3,-16,-4,-5,-14,-15,-10,-11,-8,-9,-6,-7,]),'ID':([2,4,6,7,10,11,12,13,14,15,19,22,23,25,27,28,30,31,32,],[5,5,5,11,20,-16,-4,-5,-14,-15,11,-10,-11,11,-8,-9,11,-6,-7,]),'COLON':([5,9,18,20,21,29,],[7,19,-12,-13,25,30,]),'LBRACKET':([5,21,],[8,24,]),'COMMA':([5,9,18,20,],[10,10,10,-13,]),'INT':([7,19,25,30,],[14,14,14,14,]),'FLOAT':([7,19,25,30,],[15,15,15,15,]),'CINT':([8,24,],[17,17,]),'RBRACKET':([16,17,26,],[21,-43,29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vars':([0,1,3,],[1,3,3,]),'aux':([2,4,6,],[4,6,6,]),'aux2':([5,9,18,],[9,18,18,]),'tipo_simple':([7,19,25,30,],[12,22,27,31,]),'tipo_compuesto':([7,19,25,30,],[13,23,28,32,]),'cint':([8,24,],[16,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> vars","S'",1,None,None,None),
  ('vars -> vars vars','vars',2,'p_vars','obi_yacc.py',9),
  ('vars -> VAR aux','vars',2,'p_vars','obi_yacc.py',10),
  ('aux -> aux aux','aux',2,'p_aux','obi_yacc.py',13),
  ('aux -> ID COLON tipo_simple','aux',3,'p_aux','obi_yacc.py',14),
  ('aux -> ID COLON tipo_compuesto','aux',3,'p_aux','obi_yacc.py',15),
  ('aux -> ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET COLON tipo_simple','aux',9,'p_aux','obi_yacc.py',16),
  ('aux -> ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET COLON tipo_compuesto','aux',9,'p_aux','obi_yacc.py',17),
  ('aux -> ID LBRACKET cint RBRACKET COLON tipo_simple','aux',6,'p_aux','obi_yacc.py',18),
  ('aux -> ID LBRACKET cint RBRACKET COLON tipo_compuesto','aux',6,'p_aux','obi_yacc.py',19),
  ('aux -> ID aux2 COLON tipo_simple','aux',4,'p_aux','obi_yacc.py',20),
  ('aux -> ID aux2 COLON tipo_compuesto','aux',4,'p_aux','obi_yacc.py',21),
  ('aux2 -> aux2 aux2','aux2',2,'p_aux2','obi_yacc.py',24),
  ('aux2 -> COMMA ID','aux2',2,'p_aux2','obi_yacc.py',25),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','obi_yacc.py',28),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','obi_yacc.py',29),
  ('tipo_compuesto -> ID','tipo_compuesto',1,'p_tipo_compuesto','obi_yacc.py',32),
  ('asignacion -> ID LBRACKET cint RBRACKET LBRACKET cint RBRACKET EQUALS expresion','asignacion',9,'p_asignacion','obi_yacc.py',35),
  ('asignacion -> ID LBRACKET cint RBRACKET EQUALS expresion','asignacion',6,'p_asignacion','obi_yacc.py',36),
  ('asignacion -> ID EQUALS expresion','asignacion',3,'p_asignacion','obi_yacc.py',37),
  ('expresion -> exp_bool','expresion',1,'p_expresion','obi_yacc.py',42),
  ('expresion -> exp_bool rel_op exp_bool','expresion',3,'p_expresion','obi_yacc.py',43),
  ('expresion -> expresion AND exp_bool','expresion',3,'p_expresion','obi_yacc.py',44),
  ('expresion -> expresion OR exp_bool','expresion',3,'p_expresion','obi_yacc.py',45),
  ('expresion -> expresion AND exp_bool rel_op exp_bool','expresion',5,'p_expresion','obi_yacc.py',46),
  ('expresion -> expresion OR exp_bool rel_op exp_bool','expresion',5,'p_expresion','obi_yacc.py',47),
  ('exp_bool -> TRUE','exp_bool',1,'p_exp_bool','obi_yacc.py',50),
  ('exp_bool -> FALSE','exp_bool',1,'p_exp_bool','obi_yacc.py',51),
  ('exp_bool -> exp','exp_bool',1,'p_exp_bool','obi_yacc.py',52),
  ('exp -> termino','exp',1,'p_exp','obi_yacc.py',55),
  ('exp -> exp PLUS termino','exp',3,'p_exp','obi_yacc.py',56),
  ('exp -> exp MINUS termino','exp',3,'p_exp','obi_yacc.py',57),
  ('termino -> factor','termino',1,'p_termino','obi_yacc.py',61),
  ('termino -> termino TIMES factor','termino',3,'p_termino','obi_yacc.py',62),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino','obi_yacc.py',63),
  ('termino -> termino MODULO factor','termino',3,'p_termino','obi_yacc.py',64),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','obi_yacc.py',68),
  ('factor -> var','factor',1,'p_factor','obi_yacc.py',69),
  ('factor -> PLUS var','factor',2,'p_factor','obi_yacc.py',70),
  ('factor -> MINUS var','factor',2,'p_factor','obi_yacc.py',71),
  ('var -> ID','var',1,'p_var','obi_yacc.py',75),
  ('var -> cint','var',1,'p_var','obi_yacc.py',76),
  ('var -> cfloat','var',1,'p_var','obi_yacc.py',77),
  ('cint -> CINT','cint',1,'p_cint','obi_yacc.py',81),
  ('cfloat -> NUMBER','cfloat',1,'p_cfloat','obi_yacc.py',85),
  ('rel_op -> LT','rel_op',1,'p_rel_op','obi_yacc.py',89),
  ('rel_op -> LE','rel_op',1,'p_rel_op','obi_yacc.py',90),
  ('rel_op -> GT','rel_op',1,'p_rel_op','obi_yacc.py',91),
  ('rel_op -> GE','rel_op',1,'p_rel_op','obi_yacc.py',92),
  ('rel_op -> EQ','rel_op',1,'p_rel_op','obi_yacc.py',93),
  ('rel_op -> NE','rel_op',1,'p_rel_op','obi_yacc.py',94),
]
